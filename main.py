import json
import requests
import time
from datetime import datetime, timedelta

import telebot
from telebot import types
import traceback

import locale

locale.setlocale(
    locale.LC_ALL,
    ("ru_RU", "UTF-8"),
)  # –î–ª—è —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Å—è—Ü–µ–≤ –≤ –º–æ–¥—É–ª–µ–π datetime

currencies = {"rub": "—Ä—É–±."}

categories = {
    "main": "–í—Å–µ",
    "cinema": "–ö–∏–Ω–æ",
    "concert": "–ö–æ–Ω—Ü–µ—Ä—Ç",
    "theatre": "–¢–µ–∞—Ç—Ä",
    "art": "–í—ã—Å—Ç–∞–≤–∫–∏",
    "standup": "–°—Ç–µ–Ω–¥–∞–ø",
    "show": "–®–æ—É",
    "quest": "–ö–≤–µ—Å—Ç—ã",
}

YANDEX_AFISHA_HEADERS = {
    "Accept": "application/json, text/javascript, */*; q=0.01",
    "Accept-Language": "ru,en;q=0.9",
    "x-force-cors-preflight": "1",
}


def getEventsInCityWithPeriod(
    city: str,
    date: datetime,
    *,
    category: str = "main",
    period: int = 1,
    limit: int = 10,
    offset: int = 0,
):
    params = {
        "limit": limit,
        "offset": offset,
        "rubric": category,
        "recommended": False,
        "date": date.strftime("%Y-%m-%d"),
        "period": period,
        "hasMixed": "0",
        "city": city.lower(),
        "_": str(round(time.time() * 1000)),
    }

    response = requests.get(
        f"https://afisha.yandex.ru/api/events/rubric/{category}",
        params=params,
        headers=YANDEX_AFISHA_HEADERS,
    )
    events = []
    data = response.json()
    for event in data["data"]:
        events.append(
            {
                "url": f"https://afisha.yandex.ru{event['event']['url']}",  # example: /prem/concert/name_event
                "name": event["event"]["title"],
                "contentRating": event["event"]["contentRating"],
                "tickets": event["event"]["tickets"],
                "dates": [
                    datetime.strptime(date, "%Y-%m-%d")
                    for date in event["scheduleInfo"]["dates"]
                ],
                "times": [t for t in event["scheduleInfo"]["regularity"]["daily"]],
                "oneOfPlaces": {
                    "url": f"https://afisha.yandex.ru{event["scheduleInfo"]["oneOfPlaces"]['url']}",
                    "title": event["scheduleInfo"]["oneOfPlaces"]["title"],
                },
                "type": {
                    "code": event["event"]["type"]["code"],
                    "name": event["event"]["type"]["name"],
                },
                "previewText": event["scheduleInfo"]["preview"]["text"],
            }
        )
    return events


bot = telebot.TeleBot("7121373991:AAG_t5_GsD9UAzghR9hQJPv1Elx31jwlC70")
last_messages: dict[int, list[int]] = {}


@bot.message_handler(
    content_types=[
        "photo",
        "video",
        "audio",
        "document",
        "sticker",
        "animation",
        "voice",
        "video_note",
        "story",
    ]
)
def get_content(message: types.Message):
    msg = bot.reply_to(
        message,
        "–ú–Ω–µ –±—ã –æ—á–µ–Ω—å —Ö–æ—Ç–µ–ª–æ—Å—å —É–∑–Ω–∞—Ç—å, —á—Ç–æ —Ç–∞–º, –Ω–æ —è –Ω–µ —É–º–µ—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —Ç–∞–∫–æ–≥–æ —Ä–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—èüòî.",
    )
    last_messages[message.chat.id] = [msg.message_id]


@bot.message_handler(commands=["start"])
def start(message: types.Message):
    markup = types.ReplyKeyboardMarkup()
    btn1 = types.KeyboardButton("–ú–µ–Ω—é")
    btn2 = types.KeyboardButton("–ü–æ–º–æ—â—å")
    btn3 = types.KeyboardButton("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
    btn4 = types.KeyboardButton("–°–ø—Ä–∞–≤–∫–∞")
    markup.row(btn1, btn4)
    markup.row(btn2, btn3)
    # markup2 = types.InlineKeyboardMarkup()
    msg = bot.send_message(
        message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}", reply_markup=markup
    )
    last_messages[message.chat.id] = [msg.message_id]


@bot.message_handler(commands=["support"])
def support(message: types.Message):
    support_text = """
    –ù–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–π –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é:
    - Telegram: @savasakii –∏–ª–∏ @egorichlyadov
    - E-mail: saveliybk30@gmail.com –∏–ª–∏ lyadovegorka@yandex.ru
    """
    msg = bot.send_message(message.chat.id, support_text)
    last_messages[message.chat.id] = [msg.message_id]


@bot.message_handler(func=lambda message: message.text.lower() == "–º–µ–Ω—é")
@bot.message_handler(commands=["menu"])
def menu(message: types.Message):
    file = open("./mainphoto.jpg", "rb")
    markup = types.InlineKeyboardMarkup()
    for key, name in categories.items():
        markup.add(
            types.InlineKeyboardButton(
                text=name, callback_data=json.dumps(["GEC", key])
            )
        )
    msg = bot.send_photo(
        message.chat.id,
        file,
        caption="–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –≤ –ü–µ—Ä–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=markup,
    )
    last_messages[message.chat.id] = [msg.message_id]


@bot.message_handler(func=lambda message: message.text.lower() == "–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
@bot.message_handler(commands=["restart"])
def restart(message: types.Message):
    if message.chat.id in last_messages:
        for msg_id in last_messages[message.chat.id]:
            try:
                bot.delete_message(message.chat.id, msg_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                traceback.print_exc()  # –î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
        last_messages[message.chat.id] = []  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ ID —Å–æ–æ–±—â–µ–Ω–∏–π

    msg = bot.send_message(
        message.chat.id,
        "–°–µ—Å—Å–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞. –í—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è. –ü—Ä–æ–ø–∏—à–∏—Ç–µ '/start' –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞",
    )
    last_messages[message.chat.id] = [msg.message_id]
    bot.register_next_step_handler(message, start)


@bot.message_handler(func=lambda message: message.text.lower() == "—Å–ø—Ä–∞–≤–∫–∞")
def help_message(message: types.Message):
    help_text = """
    –í–æ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –±–æ—Ç—É:
    - –ö–æ–º–∞–Ω–¥–∞ '/start' - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.
    - –ö–æ–º–∞–Ω–¥–∞ '/menu' - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    - –ö–æ–º–∞–Ω–¥–∞ '/support' - –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –Ω–∞—Å—á—ë—Ç –≤–∞—à–∏—Ö –ø—Ä–æ–±–ª–µ–º.
    - –ö–æ–º–∞–Ω–¥–∞ '/restart' - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é —Å –±–æ—Ç–æ–º.
    - –ø—Ä–æ–ø–∏—à–∏—Ç–µ '–ú–µ–Ω—é' - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    - –ø—Ä–æ–ø–∏—à–∏—Ç–µ '–°–ø—Ä–∞–≤–∫–∞' - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
    - –ø—Ä–æ–ø–∏—à–∏—Ç–µ '–ü–æ–º–æ—â—å' - –ø–æ–ª—É—á–∏—Ç—å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - –ø—Ä–æ–ø–∏—à–∏—Ç–µ '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é, —á—Ç–æ–±—ã –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø—Ä–æ–ø–∏—à–∏—Ç–µ '/start' —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.
    """
    msg = bot.reply_to(message, help_text)
    last_messages[message.chat.id] = [msg.message_id]


@bot.message_handler(func=lambda message: message.text.lower() == "–ø–æ–º–æ—â—å")
def help_document(message: types.Message):
    with open("–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.pdf", "rb") as help_file:
        msg = bot.send_message(
            message.chat.id,
            "–í —ç—Ç–æ–º —Ñ–∞–π–ª–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –ø–æ–º–æ—â—å—é –Ω–µ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Ä–µ—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É",
        )
        bot.send_document(message.chat.id, help_file)
        last_messages[message.chat.id] = [msg.message_id]


@bot.message_handler(func=lambda message: True)
def echo_all(message: types.Message):
    msg = bot.reply_to(message, "–ß—Ç–æ —Ç–æ –≤—ã –Ω–µ —Ç–æ –Ω–∞–∂–∞–ª–∏, –ø—Ä–æ–ø–∏—à–∏—Ç–µ '/start'")

    if message.chat.id not in last_messages:
        last_messages[message.chat.id] = []
    last_messages[message.chat.id].extend([message.message_id, msg.message_id])


def make_pagination_markup(method, limit, offset, date, period, mid, category):
    markup = types.InlineKeyboardMarkup()
    btns = []
    if offset > 0 and offset >= limit:
        btns.append(
            types.InlineKeyboardButton(
                "–ü—Ä–µ–¥. —Å—Ç—Ä.",
                callback_data=json.dumps(
                    [method, limit, offset - limit, date, period, mid, category]
                ),
            )
        )
    btns.append(
        types.InlineKeyboardButton(
            "–°–ª–µ–¥. —Å—Ç—Ä.",
            callback_data=json.dumps(
                [method, limit, offset + limit, date, period, mid, category]
            ),
        )
    )
    markup.add(*btns)
    return markup

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call: types.CallbackQuery):
    """
    data[0] - method; GE - get events; GEC - get events by category;
    data[1] - limit
    data[2] - offset
    data[3] - date
    data[4] - period
    data[5] - message id to edit (default: -1)
    data[6] - category
    """
    data = json.loads(call.data)
    method = data[0]

    if method == "GE":  # –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ö–æ–¥—è—Ç —Å–µ–≥–æ–¥–Ω—è
        limit, offset, date, period, message_id, category = data[1:]
        events = getEventsInCityWithPeriod(
            "perm",
            datetime.strptime(date, "%Y-%m-%d"),
            limit=limit,
            offset=offset,
            period=period,
            category=category,
        )
        isToday = date == datetime.today().strftime("%Y-%m-%d")
        message = f"<b>–°–æ–±—ã—Ç–∏—è {'—Å–µ–≥–æ–¥–Ω—è' if isToday else datetime.strptime(date, "%Y-%m-%d").strftime("%d %B %Y")}:</b>\n"
        for event in events:
            message += (
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: <a href=\"{event['url']}\">\"{event['name']}\"</a>\n"
                + f"–î–∞—Ç–∞: {event["dates"][0].strftime("%d %B %Y") if period > 1 else ('—Å–µ–≥–æ–¥–Ω—è' if isToday else datetime.strptime(date, "%Y-%m-%d").strftime("%d %B %Y"))}\n"
                + (
                    f"–í—Ä–µ–º—è: —Å {event['times'][0]} –¥–æ {event['times'][-1]}\n"
                    if len(event["times"]) > 1
                    else ""
                )
                + f"–ú–µ—Å—Ç–æ: <a href=\"{event['oneOfPlaces']['url']}\">{event['oneOfPlaces']['title']}</a>\n"
                + f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {event['type']['name']}\n"
                + (
                    f"–¶–µ–Ω–∞: –æ—Ç {event['tickets'][0]['price']['min']//100} –¥–æ {event['tickets'][0]['price']['max']//100} {currencies[event['tickets'][0]['price']['currency']]}"
                    if len(event["tickets"]) > 0
                    else ""
                )
                + "\n\n"
            )
        if len(events) == 0:
            message += "    –°–æ–±—ã—Ç–∏–π –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å :("
        if message_id == -1:
            markup = make_pagination_markup(
                method, limit, offset, date, period, message_id, category
            )
            m = bot.send_message(
                call.message.chat.id,
                message,
                parse_mode="HTML",
                reply_markup=markup,
                link_preview_options=types.LinkPreviewOptions(is_disabled=True),
            )
            message_id = m.message_id
        markup = make_pagination_markup(
            method, limit, offset, date, period, message_id, category
        )
        m = bot.edit_message_text(
            message,
            call.message.chat.id,
            message_id,
            parse_mode="HTML",
            reply_markup=markup,
            link_preview_options=types.LinkPreviewOptions(is_disabled=True),
        )
    elif method == "GEC":  # –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        category = data[1]
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton(
                "–ù–∞ —Å–µ–≥–æ–¥–Ω—è",
                callback_data=json.dumps(
                    [
                        "GE",
                        10,
                        0,
                        datetime.today().strftime("%Y-%m-%d"),
                        1,
                        -1,
                        category,
                    ]
                ),
            )
        )
        markup.add(
            types.InlineKeyboardButton(
                "–ù–∞ –∑–∞–≤—Ç—Ä–∞",
                callback_data=json.dumps(
                    [
                        "GE",
                        10,
                        0,
                        (datetime.today() + timedelta(days=1)).strftime("%Y-%m-%d"),
                        1,
                        -1,
                        category,
                    ]
                ),
            )
        )
        markup.add(
            types.InlineKeyboardButton(
                "–ù–∞ 7 –¥–Ω–µ–π",
                callback_data=json.dumps(
                    [
                        "GE",
                        10,
                        0,
                        datetime.today().strftime("%Y-%m-%d"),
                        7,
                        -1,
                        category,
                    ]
                ),
            )
        )
        msg = bot.send_message(
            call.message.chat.id,
            f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –∏–ª–∏ –∫–∞–∫–∏–µ –¥–Ω–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{categories[category]}": ',
            reply_markup=markup,
        )


bot.polling(none_stop=True)
